// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id             String          @id @default(uuid())
  name           String?
  email          String          @unique
  image          String?
  password       String
  role           UserRole        @default(USER)
  createdAT      DateTime        @default(now())
  updatedAT      DateTime        @updatedAt
  problems       Problem[]
  submissions    Submissions[]
  problemsSolved ProblemSolved[]
}

model Problem {
  id                String          @id @default(uuid())
  title             String
  description       String
  difficulty        Difficulty
  tags              String[]
  userId            String
  examples          String
  constraints       String
  hints             String?
  editorial         String?
  testcases         Json
  codeSnippets      Json
  refernceSolutions Json
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now())
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  submissions       Submissions[]
  solvedBy          ProblemSolved[]
}

model Submissions {
  id            String           @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @default(now())
  testCases     TestCaseResult[]
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem       Problem          @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model TestCaseResult {
  id             String      @id @default(uuid())
  submissionId   String
  testCases      Int
  passed         Boolean
  stdout         String?
  expected       String
  stderr         String?
  compiledOutput String?
  status         String
  memory         String?
  time           String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @default(now())
  submissions    Submissions @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model ProblemSolved {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}
